#include  <stdio.h>
#include  <stdlib.h>
#include  <string.h>
#define  MAX_VERTEX_NUM 50//最大顶点个数
#define  VertexType int//顶点数据的类型

typedef  struct  InfoType  //结点信息
{
	int  num;
	char name[10];
	int  ES;  //最早开始
	int  LS;  //最迟开始
	int  TF;  //总时差
	int  EF;  //最早完成
	int  LF;  //最迟完成
	int  FF;  //自由时差
	int  LT;  //持续时间
}InfoType;


typedef  struct  ArcNode//表结点
{
	int  adjvex;  //邻接点在数组中的位置下标
	struct  ArcNode  * nextarc;  //指向下一个邻接点的指针
	InfoType  * info;  //信息域
}ArcNode;

typedef  struct  VNode//头结点
{
	VertexType  data;//顶点的数据域
	ArcNode  * firstarc;//指向邻接点的指针
}VNode, AdjList[MAX_VERTEX_NUM];//存储各链表头结点的数组

typedef  struct
{
	AdjList  vertices;//图中顶点的数组
	int  vexnum, arcnum;//记录图中顶点数和边或弧数
}ALGraph;

typedef  struct  //录入信息结构
{
	int num;
	char  name[10];
	int  ltime;
	int  jinqian[50];//jinqian[0]储存该节点紧前工作数量，储存其他紧前工作编号
}V;
V Vex[MAX_VERTEX_NUM];

void input(ALGraph **G)
{
	int n;
	char judge;
	for (n = 1; n < MAX_VERTEX_NUM&&judge != 'n'; n++)
	{
		printf("请输入工作名称:");
		scanf("%s", &Vex[n].name[0]);
		printf("请输入工作持续时间:");
		scanf("%d", &Vex[n].ltime);
		Vex[n].num = n;
		for (;;)
		{
			int b;
			printf("请输入紧前工作数量:");
			scanf("%d", &b);
			Vex[n].jinqian[0] = b;//紧前工作数组[0]存紧前工作数量
			if (b == 0)
				break;
			else printf("请输入紧前工作编号:");
			for (int i = 1; i <= b; i++)
			{
				fflush(stdin);
				scanf("%d", &Vex[n].jinqian[i]);
			}
			break;
		}
		printf("是否继续输入？(y/n):");
		fflush(stdin);
		scanf("%c", &judge);
		fflush(stdin);
	}
	(*G)->vexnum = n - 1;
}


//AOV
void CreateAOV(ALGraph **G) {
	for (int i = 1; i <= (*G)->vexnum; i++)
	{
		(*G)->vertices[i].data = Vex[i].num;
		(*G)->vertices[i].firstarc = NULL;
	}//头结点数组建立 
	int  j;
		for (j = 1; j <= (*G)->vexnum; j++)
		{
			for (int k = 1; k <= Vex[j].jinqian[0]; k++)
			{
				{
					ArcNode *p = (ArcNode*)malloc(sizeof(ArcNode));
					p->adjvex = Vex[j].num;
					int locate = Vex[j].jinqian[k]; 
					p->nextarc = (*G)->vertices[locate].firstarc;
					(*G)->vertices[locate].firstarc = p;
				}
			}
		}
}

void output(ALGraph **G)
{
	printf("邻接表为:\n");
	for (int i = 1; i <= (*G)->vexnum; i++)
	{
		ArcNode  *p = (ArcNode*)malloc(sizeof(ArcNode));
		p = (*G)->vertices[i].firstarc;
		while (p)
		{
			printf("(%d,%d)", (*G)->vertices[i].data, (*G)->vertices[p->adjvex].data);
			p = p->nextarc;
		}
		printf("\n");
	}
}

int main()
{
	ALGraph *G = (ALGraph*)malloc(sizeof(ALGraph));
	input(&G);
	printf("%d", G->vexnum);
	CreateAOV(&G);
	output(&G);
	return 0;
}